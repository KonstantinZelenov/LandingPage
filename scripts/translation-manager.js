/* –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

// –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
translator.addModule(container, await fetchTranslations('module-name'));


–ì–æ—Ä—è—á–∞—è –∑–∞–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤

// –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
translator.translateAll('fr');


–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π!!!!

const createTranslationManager = () => {
    const modules = [];
    let currentLang = 'en';
    let lazyModules = new Map(); // –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

    return {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã ...
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–µ–Ω–∏–≤–æ–≥–æ –º–æ–¥—É–ª—è
        addLazyModule(container, translationLoader, processor = null) {
            lazyModules.set(container, { translationLoader, processor });
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –ª–µ–Ω–∏–≤–æ–≥–æ –º–æ–¥—É–ª—è
        async loadAndTranslateModule(container, lang) {
            const lazyModule = lazyModules.get(container);
            if (!lazyModule) return;
            
            const { translationLoader, processor } = lazyModule;
            const translations = await translationLoader(lang);
            
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –º–æ–¥—É–ª—å
            this.addModule(container, translations, processor);
            this.translateModule(container, lang);
            
            lazyModules.delete(container); // –£–±–∏—Ä–∞–µ–º –∏–∑ –ª–µ–Ω–∏–≤—ã—Ö
        }
    };
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
translator.addLazyModule(
    heavyPopupContainer, 
    async (lang) => {
        // –ì—Ä—É–∑–∏–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ø–∞–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        const response = await fetch(`/api/translations/heavy-popup/${lang}`);
        return response.json();
    },
    customProcessor
);



–ü–õ–ê–ì–ò–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
const createTranslationManager = () => {
    const modules = [];
    let currentLang = 'en';
    const plugins = []; // –ú–∞—Å—Å–∏–≤ –ø–ª–∞–≥–∏–Ω–æ–≤

    return {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã ...
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
        use(plugin) {
            plugins.push(plugin);
            return this; // –î–ª—è —á–µ–π–Ω–∏–Ω–≥–∞
        },
        
        // –•—É–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
        translateAll(lang) {
            // –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
            plugins.forEach(plugin => plugin.beforeTranslate?.(lang, modules));
            
            modules.forEach(module => {
                this.translateModule(module.container, lang);
            });
            
            currentLang = lang;
            
            // –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            plugins.forEach(plugin => plugin.afterTranslate?.(lang, modules));
        }
    };
};

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const loggerPlugin = {
    beforeTranslate(lang, modules) {
        console.log(`üîÑ Switching to ${lang}, modules: ${modules.length}`);
    },
    afterTranslate(lang, modules) {
        console.log(`‚úÖ Successfully translated to ${lang}`);
    }
};

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const analyticsPlugin = {
    afterTranslate(lang, modules) {
        if (typeof gtag !== 'undefined') {
            gtag('event', 'language_change', { language: lang });
        }
    }
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
translator
    .use(loggerPlugin)
    .use(analyticsPlugin);


    –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
translator.addModule(contactsContainer, contactsTranslations, (container, lang, translations) => {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ placeholder'—ã
    const placeholderElements = container.querySelectorAll('[data-i18n-placeholder]');
    placeholderElements.forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        if (translations[lang]?.[key]) {
            element.setAttribute('placeholder', translations[lang][key]);
        }
    });
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const interpolatedElements = container.querySelectorAll('[data-i18n-interpolate]');
    interpolatedElements.forEach(element => {
        const key = element.getAttribute('data-i18n-interpolate');
        const variables = JSON.parse(element.getAttribute('data-i18n-vars') || '{}');
        
        if (translations[lang]?.[key]) {
            let text = translations[lang][key];
            
            // –ó–∞–º–µ–Ω—è–µ–º {variable} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            Object.entries(variables).forEach(([varName, varValue]) => {
                text = text.replace(new RegExp(`{${varName}}`, 'g'), varValue);
            });
            
            element.textContent = text;
        }
    });
});

// –í HTML:
<div data-i18n-interpolate="welcome_message" 
     data-i18n-vars='{"name": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", "days": 14}'>
     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {days} –¥–Ω–µ–π.
</div>


DEVTOOLS –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò

const createTranslationManager = () => {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    return {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã ...
        
        // Devtools –º–µ—Ç–æ–¥—ã
        _getInternalState() {
            return {
                modules: modules.map(m => ({
                    container: m.container.className,
                    translations: Object.keys(m.translations),
                    hasProcessor: !!m.processor
                })),
                currentLang,
                totalKeys: this._getTotalKeys()
            };
        },
        
        _getTotalKeys() {
            const allKeys = new Set();
            modules.forEach(module => {
                Object.values(module.translations).forEach(langObj => {
                    Object.keys(langObj).forEach(key => allKeys.add(key));
                });
            });
            return allKeys.size;
        },
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        validateTranslations() {
            const warnings = [];
            
            modules.forEach((module, index) => {
                const languages = Object.keys(module.translations);
                const baseLang = languages[0];
                const baseKeys = Object.keys(module.translations[baseLang]);
                
                languages.forEach(lang => {
                    const langKeys = Object.keys(module.translations[lang]);
                    const missingKeys = baseKeys.filter(key => !langKeys.includes(key));
                    const extraKeys = langKeys.filter(key => !baseKeys.includes(key));
                    
                    if (missingKeys.length > 0) {
                        warnings.push(`üö® ${lang}: Missing keys: ${missingKeys.join(', ')}`);
                    }
                    if (extraKeys.length > 0) {
                        warnings.push(`‚ö†Ô∏è ${lang}: Extra keys: ${extraKeys.join(', ')}`);
                    }
                });
            });
            
            return warnings;
        }
    };
};

// –í –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
console.log('Translation State:', translator._getInternalState());
console.log('Validation:', translator.validateTranslations());


–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê

const createTranslationManager = () => {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    return {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã ...
        
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        detectLanguage() {
            // 1. –ò–∑ localStorage
            const saved = localStorage.getItem('preferred_language');
            if (saved && this.supportedLanguages.includes(saved)) {
                return saved;
            }
            
            // 2. –ò–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            const browserLang = navigator.language.split('-')[0];
            if (this.supportedLanguages.includes(browserLang)) {
                return browserLang;
            }
            
            // 3. –ò–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const urlParams = new URLSearchParams(window.location.search);
            const urlLang = urlParams.get('lang');
            if (urlLang && this.supportedLanguages.includes(urlLang)) {
                return urlLang;
            }
            
            return 'en'; // fallback
        },
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        setLanguage(lang) {
            this.translateAll(lang);
            localStorage.setItem('preferred_language', lang);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            const url = new URL(window.location);
            url.searchParams.set('lang', lang);
            window.history.replaceState({}, '', url);
        },
        
        supportedLanguages: ['en', 'ru', 'es', 'fr'] // –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
    };
};

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
const preferredLang = translator.detectLanguage();
translator.setLanguage(preferredLang);


HOT RELOAD –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò

// –¢–æ–ª—å–∫–æ –¥–ª—è development mode
if (process.env.NODE_ENV === 'development') {
    // Hot reload –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    const translationHotReload = setInterval(() => {
        fetch('/api/translations/last-updated')
            .then(r => r.json())
            .then(({ timestamp }) => {
                if (window.lastTranslationUpdate !== timestamp) {
                    window.lastTranslationUpdate = timestamp;
                    console.log('üîÑ Translations updated, reloading...');
                    location.reload();
                }
            });
    }, 2000);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–µ–±–∞–≥–∞
    window.translationManager = translator;
}

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í–°–ï–• –§–ò–ß –í–ú–ï–°–¢–ï:


const translator = createTranslationManager()
    .use(loggerPlugin)
    .use(analyticsPlugin)
    .use(cachePlugin);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
translator.setLanguage(translator.detectLanguage());

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—è–∂—ë–ª—ã—Ö –º–æ–¥—É–ª–µ–π
translator.addLazyModule(
    heavyPopupContainer,
    async (lang) => await fetchTranslations(`popup-${lang}`),
    advancedProcessor
);


*/